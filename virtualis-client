#!/usr/bin/env python3

'''Virtualis Client.

Usage: virtualis-client [options] <user>

Arguments:
  <user>  User ID.

Options:
  -h, --help         Show this help.
  --version          Show version.
  -p, --pass=<pass>  User password (prompt if not provided).
  --cafile=<cafile>  Certificate file to use.
  --capath=<capath>  Certificates directory [default: /etc/ssl/certs].
'''

import cmd
import virtualis

from abc import abstractmethod
from docopt import docopt
from getpass import getpass
from itertools import chain
from operator import methodcaller


SHORT_DATE_FORMAT = '{0:%m}/{0:%y}'
DATE_FORMAT = '{0:%d}/{0:%m}/{0:%y}'


def table(rows):
    '''Table format helper.'''

    columns = len(rows[0])
    widths = [max(map(len, (r[i] for r in rows))) for i in range(columns)]

    for row in rows:
        print('  '.join(f.ljust(widths[i]) for i, f in enumerate(row)))


def index(f):
    def new(self, arg):
        return f(self, int(arg) - 1)

    return new


def args(f):
    def new(self, arg):
        args = arg.split(' ')
        args = map(methodcaller('strip'), args)
        args = filter(None, args)
        args = list(args)

        return f(self, args)

    new.__doc__ = f.__doc__

    return new


def argsdo(f):
    def new(self, args):
        for arg in args:
            f(self, arg)

    new.__doc__ = f.__doc__

    return args(new)


class File:
    @abstractmethod
    def cat(self):
        '''Print file content.'''

    @abstractmethod
    def rm(self):
        '''Removes the file.'''


class Directory:
    def __init__(self, parent):
        self.parent = parent

    @abstractmethod
    def ls(self):
        '''List directory content.'''

    @abstractmethod
    def cd(self, arg):
        '''Return a subdirectory for given argument.'''

    @abstractmethod
    def cf(self, arg):
        '''Return a file from current directory for given argument.'''

    @abstractmethod
    def mknod(self, arg):
        '''Create a node in the current direcotry.'''


class VirtualCardFile(File):
    def __init__(self, client, card):
        self.client = client
        self.card = card

    def cat(self):
        # TODO: maybe filter transactions of this card only
        pass

    def rm(self):
        request = virtualis.DeleteCardRequest(self.card)
        self.client.send(request)


def ipagination(client, size, request):
    i = 1

    request.paginate(i, size)
    response = client.send(request)

    yield response

    done = size
    i += 1

    while done < response.count:
        request.paginate(i, size)

        yield client.send(request)

        done += size
        i += 1


class VirtualCardsDirectory(Directory):
    def __init__(self, parent, client, card):
        super().__init__(parent)

        self.client = client
        self.card = card
        self.cards = None

    def ls(self):
        if self.cards is None:
            request = virtualis.VirtualCardsRequest(self.card)
            iterator = ipagination(self.client, 20, request)
            self.cards = list(chain(*[r.cards for r in iterator]))

        rows = [['No.', 'PAN', 'AVV', 'Expiry', 'Limit']]

        for i, card in enumerate(self.cards):
            no = str(i + 1)
            pan = card.pan
            avv = card.avv
            expiry = '{0:%m}/{0:%y}'.format(card.expiry)
            limit = str(card.limit)

            rows.append([no, pan, avv, expiry, limit])

        table(rows)

    @index
    def cf(self, i):
        return VirtualCardFile(self.client, self.cards[i])

    @args
    def mknod(self, args):
        request = virtualis.CreateCardRequest(self.card, args[0], args[1])
        card = self.client.send(request)

        print('PAN:', card.pan)
        print('AVV:', card.avv)
        print('Expiry:', '/'.join(map(str, card.expiry)))


class TransactionFile(File):
    def __init__(self, transaction):
        self.transaction = transaction

    def cat(self):
        print('AVV', self.transaction.avv)
        print('Auth code:', self.transaction.auth_code)
        print('Cumulative limit:', str(self.transaction.cumulative_limit))
        print('Expiry:', SHORT_DATE_FORMAT.format(self.transaction.expiry))
        print('Issue date::', DATE_FORMAT.format(self.transaction.issue_date))
        print('Merchant city:', self.transaction.merchant_city)
        print('Merchant country:', self.transaction.merchant_country)
        print('Merchant name:', self.transaction.merchant_name)
        print('Micro ref. number:', self.transaction.micro_ref_number)
        print('Usage number:', str(self.transaction.num_usage))
        print('PAN:', self.transaction.pan)
        print('Amount:', str(self.transaction.amount))
        print('Date:', DATE_FORMAT.format(self.transaction.date))
        print('Limit:', str(self.transaction.limit))
        print('Valid from:', DATE_FORMAT.format(self.transaction.valid_from))
        print('Valid to:', DATE_FORMAT.format(self.transaction.valid_to))


class TransactionsDirectory(Directory):
    def __init__(self, parent, client, card):
        super().__init__(parent)

        self.client = client
        self.card = card
        self.transactions = None

    def ls(self):
        if self.transactions is None:
            request = virtualis.TransactionsRequest(self.card)
            self.transactions = self.client.send(request).transactions

        rows = [['No.', 'Merchant', 'Amount', 'Date']]

        for i, transaction in enumerate(self.transactions):
            no = str(i + 1)
            merchant = transaction.merchant_name
            amount = str(transaction.amount)
            date = DATE_FORMAT.format(transaction.date)

            rows.append([no, merchant, amount, date])

        table(rows)

        print('*** There may be older transactions, but the pagination '
              'is not currently supported.')

    @index
    def cf(self, i):
        return TransactionFile(self.transactions[i])


class CardDirectory(Directory):
    def __init__(self, parent, client, card):
        super().__init__(parent)
        self.client = client
        self.card = card

    def ls(self):
        print('cards')
        print('transactions')

    def cd(self, arg):
        if 'cards'.startswith(arg):
            return VirtualCardsDirectory(self, self.client, self.card)
        elif 'transactions'.startswith(arg):
            return TransactionsDirectory(self, self.client, self.card)
        else:
            print('*** Unknown directory.')
            return self


class CardFile(File):
    def __init__(self, card):
        self.card = card

    def cat(self):
        print('Nick:', self.card.nick)
        print('Holder:', self.card.holder_name)
        print('PAN:', self.card.pan)


class CardsDirectory(Directory):
    def __init__(self, client):
        super().__init__(self)
        self.client = client
        self.cards = None

    def ls(self):
        if self.cards is None:
            request = virtualis.CardsRequest()
            self.cards = self.client.send(request).cards

        if len(self.cards) == 0:
            print('*** No cards for your account.')
            return

        for i, card in enumerate(self.cards):
            print(i + 1, '', card.nick)

    @index
    def cd(self, i):
        return CardDirectory(self, self.client, self.cards[i])

    @index
    def cf(self, i):
        return CardFile(self.cards[i])


class VirtualisShell(cmd.Cmd):
    intro = 'Virtualis shell. Type help or ? to list commands.\n'
    prompt = '(virtualis) '

    def __init__(self, client):
        super().__init__()
        self.client = client
        self.directory = CardsDirectory(self.client)
        self.home_directory = self.directory

    def do_exit(self, arg):
        '''Exit the shell.'''
        return True

    @args
    def do_ls(self, args):
        '''List current "directory".'''

        if len(args) == 0:
            self.directory.ls()
            return

        if len(args) == 1:
            self.directory.cd(args[0]).ls()
            return

        first = True

        for arg in args:
            if first:
                first = False
            else:
                print()

            print(arg + ':')
            self.directory.cd(arg).ls()

    def do_cd(self, arg):
        '''Go in given "directory", or home if nothing given.'''

        if arg == '':
            self.directory = self.home_directory
        elif arg == '.':
            pass
        elif arg == '..':
            self.directory = self.directory.parent
        else:
            self.directory = self.directory.cd(arg)

    @argsdo
    def do_cat(self, arg):
        '''View a card detailed informations.'''
        self.directory.cf(arg).cat()

    @argsdo
    def do_rm(self, arg):
        '''Permanently remove a virtual card.'''
        self.directory.cf(arg).rm()

    def do_mknod(self, arg):
        '''Create a new virtual card with "mknod limit valid-for".'''
        self.directory.mknod(arg)


def main():
    args = docopt(__doc__, version='Virtualis Client 1.0')

    user = args['<user>']
    pass_ = args['--pass']
    cafile = args['--cafile']
    capath = args['--capath']

    if pass_ is None:
        pass_ = getpass()

    client = virtualis.Client(user, pass_, cafile, capath)

    VirtualisShell(client).cmdloop()


if __name__ == '__main__':
    main()
